<android.hardware.location.ActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: boolean flush()> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] getSupportedActivities()> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: I[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: I[] getContextHubHandles()> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<android.hardware.location.ContextHubService: int unloadNanoApp(int)> -> _SOURCE_
android.permission.LOCATION_HARDWARE
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dpsink.A2dpSinkService.BluetoothA2dpSinkBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: android.media.MediaMetadata getMetadata(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: android.media.session.PlaybackState getPlaybackState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: void sendPassThroughCmd(android.bluetooth.BluetoothDevice,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.avrcp.AvrcpControllerService.BluetoothAvrcpControllerBinder: boolean setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean cancelDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean configHciSnoopLog(boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean createBondOutOfBand(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean disable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean enable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean enableNoAutoConnect()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean factoryReset()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getAdapterConnectionState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getAddress()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getDiscoverableTimeout()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getMessageAccessPermission(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getName()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getPhonebookAccessPermission(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getProfileConnectionState(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getScanMode()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getSimAccessPermission(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isActivityAndEnergyReportingSupported()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isDiscovering()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isEnabled()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isMultiAdvertisementSupported()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isOffloadedFilteringSupported()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isOffloadedScanBatchingSupported()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.bluetooth.BluetoothActivityEnergyInfo reportActivityInfo()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: void requestActivityInfo(android.os.ResultReceiver)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean sdpSearch(android.bluetooth.BluetoothDevice,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setDiscoverableTimeout(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setMessageAccessPermission(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setName(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPhonebookAccessPermission(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setScanMode(int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setSimAccessPermission(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean startDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clearServices(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clientDisconnect(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void configureMTU(int,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void connectionParameterUpdate(int,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void disconnectAll()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void discoverServices(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void endServiceDeclaration(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: int numHwTrackFiltersAvailable()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void refreshDevice(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void serverDisconnect(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void startMultiAdvertising(int,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseSettings)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,android.os.WorkSource,java.util.List,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.BLUETOOTH_ADMIN, android.permission.BLUETOOTH_PRIVILEGED, android.permission.PEERS_MAC_ADDRESS, android.permission.UPDATE_DEVICE_STATS
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void stopMultiAdvertising(int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void stopScan(int,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void unregAll()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void unregisterClient(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void unregisterServer(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean connectAudio()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean disableWBS()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean disconnectAudio()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean enableWBS()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean isAudioOn()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: void phoneStateChanged(int,int,int,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean acceptCall(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean connectAudio()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean dial(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean dialMemory(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean disconnectAudio()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean enterPrivateMode(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean explicitCallTransfer(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean holdCall(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean redial(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean rejectCall(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfpclient.HeadsetClientService.BluetoothHeadsetClientBinder: boolean terminateCall(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: void setBluetoothTethering(boolean)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.TETHER_PRIVILEGED
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.pbapclient.PbapClientService.BluetoothPbapClientBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.sap.SapService.SapBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: int getState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.sap.SapService.SapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.car.CarRadioService: boolean setPreset(android.car.hardware.radio.CarRadioPreset)> -> _SOURCE_
android.car.permission.CAR_RADIO
<com.android.car.ICarImpl: android.os.IBinder getCarService(java.lang.String)> -> _SOURCE_
android.car.permission.CAR_CAMERA, android.car.permission.CAR_HVAC, android.car.permission.CAR_MOCK_VEHICLE_HAL, android.car.permission.CAR_NAVIGATION_MANAGER, android.car.permission.CAR_PROJECTION, android.car.permission.CAR_RADIO
<com.android.car.pm.CarPackageManagerService: void setAppBlockingPolicy(java.lang.String,android.car.content.pm.CarAppBlockingPolicy,int)> -> _SOURCE_
android.car.permission.CONTROL_APP_BLOCKING
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
android.permission.CALL_PRIVILEGED
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getCompleteVoiceMailNumberForSubscriber(int)> -> _SOURCE_
android.permission.CALL_PRIVILEGED
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceIdForPhone(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvn(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getGroupIdLevel1(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumber(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getImeiForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimChallengeResponse(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimDomain()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimImpi()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimImpu()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimIst()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimPcscf()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTag(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1Number(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1NumberForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdn(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdnForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getNaiForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberId(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTag(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumber(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int addSubInfoRecord(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: void clearDefaultsForInactiveSubIds()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int clearSubInfo()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int getActiveSubInfoCount(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: java.util.List getActiveSubscriptionInfoList(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int getAllSubInfoCount(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: java.util.List getAllSubInfoList(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setDataRoaming(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: void setDefaultDataSubId(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: void setDefaultSmsSubId(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: void setDefaultVoiceSubId(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setDisplayName(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setDisplayNameUsingSrc(java.lang.String,int,long)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setDisplayNumber(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setIconTint(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: int setSimProvisioningStatus(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.SubscriptionController: void setSubscriptionProperty(int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEfForSubscriber(int,int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastForSubscriber(int,int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastForSubscriber(int,int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(int,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendStoredText(int,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.READ_EXTERNAL_STORAGE, android.permission.SEND_SMS, android.permission.SEND_SMS_NO_CONFIRMATION
<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.phone.CarrierConfigLoader: android.os.PersistableBundle getConfigForSubId(int)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.CarrierConfigLoader: void updateConfigForPhoneId(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void answerRingingCall()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void answerRingingCallForSubscriber(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: boolean canChangeDtmfToneLength()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void disableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: void disableLocationUpdatesForSubscriber(int)> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void enableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: void enableLocationUpdatesForSubscriber(int)> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: void enableVideoCalling(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean endCall()> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: boolean endCallForSubscriber(int)> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: void factoryReset(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL, android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.phone.PhoneInterfaceManager: int getCalculatedPreferredNetworkType(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndex(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndexForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconMode(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconModeForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriText(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriTextForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaMdn(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaMin(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.phone.PhoneInterfaceManager: com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean getDataEnabled(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.phone.PhoneInterfaceManager: int getDataNetworkType(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getDataNetworkTypeForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getDeviceId(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getDeviceSoftwareVersionForSlot(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getImeiForSlot(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1AlphaTagForDisplay(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1NumberForDisplay(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaMode(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaModeForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String[] getMergedSubscriberIds(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.phone.PhoneInterfaceManager: int getNetworkTypeForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String[] getPcscfAddress(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getPreferredNetworkType(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getRadioAccessFamily(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: android.telephony.ServiceState getServiceStateForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getTetherApnRequired()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int getVoiceNetworkTypeForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmiForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean iccCloseLogicalChannel(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: B[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int invokeOemRilRequestRaw(byte[],byte[])> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isIdle(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isIdleForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isOffhook(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isOffhookForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isRadioOn(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isRadioOnForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isRinging(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isRingingForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isVideoCallingEnabled(java.lang.String)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isWorldPhone()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String nvReadItem(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean nvResetConfig(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean nvWriteCdmaPrl(byte[])> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean nvWriteItem(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void requestModemActivityInfo(android.os.ResultReceiver)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void setDataEnabled(int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void setImsRegistrationState(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void setNetworkSelectionModeAutomatic(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setNetworkSelectionModeManual(int,com.android.internal.telephony.OperatorInfo,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setPreferredNetworkType(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadioForSubscriber(int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadioPower(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void shutdownMobileRadios()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPinForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPinReportResult(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPinReportResultForSubscriber(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPukForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPukReportResult(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOffForSubscriber(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.providers.contacts.ProfileProvider: java.lang.String getType(android.net.Uri)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.AppOpsService: int checkAudioOperation(int,int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: int checkOperation(int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
android.permission.GET_APP_OPS_STATS
<com.android.server.AppOpsService: java.util.List getPackagesForOps(int[])> -> _SOURCE_
android.permission.GET_APP_OPS_STATS
<com.android.server.AppOpsService: int noteOperation(int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void resetAllModes(int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void setAudioRestriction(int,int,int,int,java.lang.String[])> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void setMode(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void setUidMode(int,int,int)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,java.lang.String[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_APP_OPS_RESTRICTIONS
<com.android.server.AppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.BluetoothManagerService: boolean disable(boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: boolean enable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.LOCAL_MAC_ADDRESS
<com.android.server.BluetoothManagerService: java.lang.String getName()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.ConnectivityService: void factoryReset()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.Network getActiveNetwork()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUid(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: com.android.internal.net.VpnInfo[] getAllVpnInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: java.lang.String getAlwaysOnVpnPackage(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)> -> _SOURCE_
android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkPropertiesForType(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.Network getNetworkForType(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheredDhcpRanges()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: com.android.internal.net.VpnConfig getVpnConfig(int)> -> _SOURCE_
android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isTetheringSupported()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.ACCESS_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: int registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkMisc)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void registerNetworkFactory(android.os.Messenger,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void reportInetCondition(int,int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
<com.android.server.ConnectivityService: void reportNetworkConnectivity(android.net.Network,boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.INTERNET
<com.android.server.ConnectivityService: boolean requestBandwidthUpdate(android.net.Network)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setAcceptUnvalidated(android.net.Network,boolean,boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setAirplaneMode(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL, android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setProvisioningNotificationVisible(boolean,int,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,boolean)> -> _SOURCE_
android.permission.CONTROL_VPN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONTROL_VPN
<com.android.server.ConnectivityService: void startNattKeepalive(android.net.Network,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.PACKET_KEEPALIVE_OFFLOAD
<com.android.server.ConnectivityService: void startTethering(int,android.os.ResultReceiver,boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: void stopTethering(int)> -> _SOURCE_
android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: int tether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: void unregisterNetworkFactory(android.os.Messenger)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int untether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.TETHER_PRIVILEGED
<com.android.server.ConnectivityService: boolean updateLockdownVpn()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConsumerIrService: I[] getCarrierFrequencies()> -> _SOURCE_
android.permission.TRANSMIT_IR
<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])> -> _SOURCE_
android.permission.TRANSMIT_IR
<com.android.server.DeviceIdleController.BinderService: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
<com.android.server.DeviceIdleController.BinderService: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
<com.android.server.DeviceIdleController.BinderService: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST
<com.android.server.DeviceIdleController.BinderService: void addPowerSaveWhitelistApp(java.lang.String)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.DeviceIdleController.BinderService: void exitIdle(java.lang.String)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.DeviceIdleController.BinderService: void removePowerSaveWhitelistApp(java.lang.String)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void clearLastInputMethodWindowForTransition(android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void hideMySoftInput(android.os.IBinder,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void removeClient(com.android.internal.view.IInputMethodClient)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_EXTERNAL_STORAGE
<com.android.server.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void showMySoftInput(android.os.IBinder,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.INSTALL_LOCATION_PROVIDER
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.UPDATE_APP_OPS_STATS, android.permission.UPDATE_DEVICE_STATS
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkPassword(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkPattern(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: boolean checkVoldPassword(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
<com.android.server.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
<com.android.server.LockSettingsService: int getStrongAuthForUser(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void requireStrongAuth(int,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void resetKeyStore(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setBoolean(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLockPassword(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLockPattern(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setSeparateProfileChallengeEnabled(int,boolean,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void systemReady()> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE, android.permission.READ_CONTACTS
<com.android.server.LockSettingsService: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void userPresent(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyPassword(java.lang.String,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyPattern(java.lang.String,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(java.lang.String,boolean,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.MmsServiceBroker.BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
android.permission.RECEIVE_MMS
<com.android.server.MmsServiceBroker.BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.server.MountService: void addUserKeyAuth(int,int,byte[],byte[])> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: long benchmark(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: int changeEncryptionPassword(int,java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: void clearPassword()> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: void createUserKey(int,int,boolean)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: int decryptStorage(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int destroySecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_DESTROY
<com.android.server.MountService: void destroyUserKey(int)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: void destroyUserStorage(java.lang.String,int,int)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: int encryptStorage(int,java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int finalizeSecureContainer(java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: void fixateNewestUserKeyAuth(int)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: void forgetAllVolumes()> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void forgetVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void format(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: int formatVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: int getEncryptionState()> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: java.lang.String getField(java.lang.String)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: java.lang.String getPassword()> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: int getPasswordType()> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: java.lang.String getPrimaryStorageUuid()> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String[] getSecureContainerList()> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: I[] getStorageUsers(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: boolean isConvertibleToFBE()> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: boolean isSecureContainerMounted(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: void lockUserKey(int)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: void mount(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int mountSecureContainer(java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: int mountVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void partitionMixed(java.lang.String,int)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: void partitionPrivate(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: void partitionPublic(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: void prepareUserStorage(java.lang.String,int,int,int)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: int renameSecureContainer(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.ASEC_RENAME
<com.android.server.MountService: int resizeSecureContainer(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: void runMaintenance()> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void setDebugFlags(int,int)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void setField(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void setVolumeNickname(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void setVolumeUserFlags(java.lang.String,int,int)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.MountService: void unlockUserKey(int,int,byte[],byte[])> -> _SOURCE_
android.permission.STORAGE_INTERNAL
<com.android.server.MountService: void unmount(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int unmountSecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: void unmountVolume(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addRoute(int,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addVpnUidRanges(int,android.net.UidRange[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void allowProtect(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearDefaultNetId()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearPermission(int[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void createPhysicalNetwork(int,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void createVirtualNetwork(int,boolean,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void denyProtect(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isClatdStarted(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isTetheringStarted()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTtys()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeNetwork(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeRoute(int,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeVpnUidRanges(int,android.net.UidRange[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDefaultNetId(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsConfigurationForNetwork(int,java.lang.String[],java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsForwarders(android.net.Network,java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsServersForNetwork(int,java.lang.String[],java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceIpv6NdOffload(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setMtu(java.lang.String,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setNetworkPermission(int,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setPermission(java.lang.String,int[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void shutdown()> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startClatd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopAccessPoint(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopClatd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopTethering()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkScoreService: boolean clearScores()> -> _SOURCE_
android.permission.BROADCAST_NETWORK_PRIVILEGED, android.permission.SCORE_NETWORKS
<com.android.server.NetworkScoreService: void disableScoring()> -> _SOURCE_
android.permission.SCORE_NETWORKS
<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache)> -> _SOURCE_
android.permission.BROADCAST_NETWORK_PRIVILEGED
<com.android.server.NetworkScoreService: boolean setActiveScorer(java.lang.String)> -> _SOURCE_
android.permission.SCORE_NETWORKS
<com.android.server.NetworkScoreService: boolean updateScores(android.net.ScoredNetwork[])> -> _SOURCE_
android.permission.SCORE_NETWORKS
<com.android.server.NsdService: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.INTERNET
<com.android.server.NsdService: void setEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.RecoverySystemService.BinderService: boolean clearBcb()> -> _SOURCE_
android.permission.RECOVERY
<com.android.server.RecoverySystemService.BinderService: boolean setupBcb(java.lang.String)> -> _SOURCE_
android.permission.RECOVERY
<com.android.server.RecoverySystemService.BinderService: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)> -> _SOURCE_
android.permission.RECOVERY
<com.android.server.SerialService: java.lang.String[] getSerialPorts()> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE, android.permission.READ_PRECISE_PHONE_STATE, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallStateForPhoneId(int,int,int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCarrierNetworkChange(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellLocationForSubscriber(int,android.os.Bundle)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataActivityForSubscriber(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDisconnectCause(int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,byte[])> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyPreciseCallState(int,int,int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyVoLteServiceStateChanged(android.telephony.VoLteServiceState)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> -> _SOURCE_
android.permission.VIBRATE
<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,int,android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,long[],int,int,android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
<com.android.server.accessibility.AccessibilityManagerService.Service: void disableSelf()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: float getMagnificationCenterX()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: float getMagnificationCenterY()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: android.graphics.Region getMagnificationRegion()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: float getMagnificationScale()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: java.util.List getWindows()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean performGlobalAction(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean resetMagnification(boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean setMagnificationScaleAndCenter(float,float,float,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean setSoftKeyboardShowMode(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void disableAccessibilityService(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void enableAccessibilityService(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)> -> _SOURCE_
getWindowToken
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> -> _SOURCE_
temporaryEnableAccessibilityStateUntilKeyguardRemoved
<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void addSharedAccountsFromParentUser(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService.ProcessInfoService: void getProcessStatesAndOomScoresFromPids(int[],int[],int[])> -> _SOURCE_
android.permission.GET_PROCESS_STATE_AND_OOM_SCORE
<com.android.server.am.ActivityManagerService.ProcessInfoService: void getProcessStatesFromPids(int[],int[])> -> _SOURCE_
android.permission.GET_PROCESS_STATE_AND_OOM_SCORE
<com.android.server.am.ActivityManagerService: void appNotRespondingViaProvider(android.os.IBinder)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONFIRM_FULL_BACKUP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: void bootAnimationComplete()> -> _SOURCE_
android.permission.BROADCAST_STICKY
<com.android.server.am.ActivityManagerService: void clearGrantedUriPermissions(java.lang.String,int)> -> _SOURCE_
android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS
<com.android.server.am.ActivityManagerService: void clearPendingBackup()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: android.app.IActivityContainer createStackOnDisplay(int)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: android.app.IActivityContainer createVirtualActivityContainer(android.os.IBinder,android.app.IActivityContainerCallback)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void deleteActivityContainer(android.app.IActivityContainer)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: java.util.List getAllStackInfos()> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: android.os.Bundle getAssistContextExtras(int)> -> _SOURCE_
android.permission.GET_TOP_ACTIVITY_INFO
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)> -> _SOURCE_
android.permission.GET_APP_GRANTED_URI_PERMISSIONS
<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)> -> _SOURCE_
android.permission.GET_INTENT_SENDER_INTENT
<com.android.server.am.ActivityManagerService: int getPackageProcessState(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)> -> _SOURCE_
android.permission.GET_DETAILED_TASKS, android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()> -> _SOURCE_
android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()> -> _SOURCE_
android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
<com.android.server.am.ActivityManagerService: I[] getRunningUserIds()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$StackInfo getStackInfo(int)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: android.graphics.Rect getTaskBounds(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.READ_FRAME_BUFFER
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int)> -> _SOURCE_
android.permission.GET_TASKS, android.permission.REAL_GET_TASKS
<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)> -> _SOURCE_
android.permission.FILTER_EVENTS
<com.android.server.am.ActivityManagerService: boolean isInHomeStack(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean isUserRunning(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> -> _SOURCE_
android.permission.KILL_BACKGROUND_PROCESSES
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> -> _SOURCE_
android.permission.KILL_BACKGROUND_PROCESSES
<com.android.server.am.ActivityManagerService: void killPackageDependents(java.lang.String,int)> -> _SOURCE_
android.permission.KILL_UID
<com.android.server.am.ActivityManagerService: void killUid(int,int,java.lang.String)> -> _SOURCE_
android.permission.KILL_UID
<com.android.server.am.ActivityManagerService: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)> -> _SOURCE_
android.permission.GET_TOP_ACTIVITY_INFO
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: boolean moveTaskToDockedStack(int,int,boolean,boolean,android.graphics.Rect,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToStack(int,int,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void moveTasksToFullscreenStack(int,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> -> _SOURCE_
android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: void performIdleMaintenance()> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void positionTaskInStack(int,int,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerTaskStackListener(android.app.ITaskStackListener)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
<com.android.server.am.ActivityManagerService: void removeStack(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean removeTask(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: boolean requestAssistContextExtras(int,com.android.internal.os.IResultReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)> -> _SOURCE_
android.permission.GET_TOP_ACTIVITY_INFO
<com.android.server.am.ActivityManagerService: void requestBugReport(int)> -> _SOURCE_
android.permission.DUMP
<com.android.server.am.ActivityManagerService: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void resizePinnedStack(android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void resizeStack(int,android.graphics.Rect,boolean,boolean,boolean,int)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void resizeTask(int,android.graphics.Rect,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void restart()> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void resumeAppSwitches()> -> _SOURCE_
android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: void sendIdleJobTrigger()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController,boolean)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> -> _SOURCE_
android.permission.SET_ALWAYS_FINISH
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void setFocusedStack(int)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void setFocusedTask(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setLenientBackgroundCheck(boolean)> -> _SOURCE_
android.permission.SET_PROCESS_LIMIT
<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean,boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SOURCE_
android.permission.SET_PROCESS_LIMIT
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> -> _SOURCE_
android.permission.SET_PROCESS_LIMIT
<com.android.server.am.ActivityManagerService: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> -> _SOURCE_
android.permission.SIGNAL_PERSISTENT_PROCESSES
<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: boolean startBinderTracking()> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void startSystemLockTaskMode(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: int startVoiceActivity(java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)> -> _SOURCE_
android.permission.BIND_VOICE_INTERACTION
<com.android.server.am.ActivityManagerService: void stopAppSwitches()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void stopLockTaskMode()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: void stopSystemLockTaskMode()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: int stopUser(int,boolean,android.app.IStopUserCallback)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: void suppressResizeConfigChanges(boolean)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void swapDockedAndFullscreenStack()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean unbindService(android.app.IServiceConnection)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_DEBUG_APP, android.permission.START_ANY_ACTIVITY, android.permission.START_TASKS_FROM_RECENTS
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY
<com.android.server.am.ActivityManagerService: void unhandledBack()> -> _SOURCE_
android.permission.FORCE_BACK
<com.android.server.am.ActivityManagerService: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: B[] getStatistics()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: android.os.ParcelFileDescriptor getStatisticsStream()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: void noteBleScanStarted(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteBleScanStopped(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteConnectivityChanged(int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteDeviceIdleMode(int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteEvent(int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFlashlightOff(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFlashlightOn(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteInteractive(boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteJobFinish(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteJobStart(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteMobileRadioPowerState(int,long,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteModemControllerActivity(android.telephony.ModemActivityInfo)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteNetworkStatsEnabled()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneState(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteResetAudio()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteResetBleScan()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteResetCamera()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteResetFlashlight()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteResetVideo()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenState(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartAudio(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartCamera(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartVideo(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopAudio(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopCamera(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopVideo(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteSyncFinish(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteSyncStart(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteVibratorOff(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWakeUp(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiControllerActivity(android.net.wifi.WifiActivityEnergyInfo)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRadioPowerState(int,long)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRssiChanged(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiState(int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiSupplicantStateChanged(int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler takeUidSnapshot(int)> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots(int[])> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.ProcessStatsService: B[] getCurrentStats(java.util.List)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.os.IBinder)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void deleteAppWidgetId(java.lang.String,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(java.lang.String,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: boolean hasBindAppWidgetPermission(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.appwidget.AppWidgetServiceImpl: void notifyAppWidgetViewDataChanged(java.lang.String,int[],int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.appwidget.AppWidgetServiceImpl: void unbindRemoteViewsService(java.lang.String,int,android.content.Intent)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,int[],android.widget.RemoteViews)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)> -> _SOURCE_
android.permission.CAPTURE_AUDIO_OUTPUT
<com.android.server.audio.AudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_ROUTING
<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)> -> _SOURCE_
android.permission.MODIFY_AUDIO_ROUTING
<com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.audio.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)> -> _SOURCE_
android.permission.REMOTE_AUDIO_PLAYBACK
<com.android.server.audio.AudioService: void setSpeakerphoneOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.audio.AudioService: void setVolumePolicy(android.media.VolumePolicy)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<com.android.server.backup.BackupManagerService.ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.BackupManagerService.ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.BackupManagerService.ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.BackupManagerService.ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void backupNow()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void clearBackupData(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void dataChanged(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void fullRestore(android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void fullTransportBackup(java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: long getAvailableRestoreToken(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: java.lang.String getCurrentTransport()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: android.content.Intent getDataManagementIntent(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: java.lang.String getDataManagementLabel(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: boolean hasBackupPassword()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: boolean isAppEligibleForBackup(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: boolean isBackupEnabled()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: java.lang.String[] listAllTransports()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: int requestBackup(java.lang.String[],android.app.backup.IBackupObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void restoreAtInstall(java.lang.String,int)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: java.lang.String selectBackupTransport(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void setAutoRestore(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void setBackupEnabled(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.backup.Trampoline: void setBackupProvisioned(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)> -> _SOURCE_
android.permission.CACHE_CONTENT, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> -> _SOURCE_
android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)> -> _SOURCE_
android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: boolean getMasterSyncAutomaticallyAsUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)> -> _SOURCE_
android.permission.CACHE_CONTENT, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setMasterSyncAutomaticallyAsUser(boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void sync(android.content.SyncRequest)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearCrossProfileIntentFilters(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwner(java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwner(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS, android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void enableSystemApp(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,android.content.Intent)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
<com.android.server.devicepolicy.DevicePolicyManagerService: void forceRemoveActiveAdmin(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabled()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeRequired()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabledForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getCertInstallerPackage(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)> -> _SOURCE_
android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()> -> _SOURCE_
android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()> -> _SOURCE_
android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getDoNotAskCredentialsOnBoot()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getForceEphemeralUsers(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackages(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getLockTaskPackages(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLockForUserAndProfiles(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColor(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColorForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationName(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationNameForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionPolicy(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServicesForUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethods(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethodsForCurrentUser()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)> -> _SOURCE_
android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getRestrictionsProvider(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictions(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getWifiMacAddress(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,byte[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installKeyPair(android.content.ComponentName,byte[],byte[],byte[],java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficient(int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAffiliatedUser()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCaCertApproved(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerApplicationRestrictionsManagingPackage()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskPermitted(java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMasterVolumeMuted(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileActivePasswordSufficientForParent(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProvisioningAllowed(java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovingAdmin(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecurityLoggingEnabled(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemOnlyUser(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallInQueue(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_DEVICE_ADMINS
<com.android.server.devicepolicy.DevicePolicyManagerService: void lockNow(boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyLockTaskModeChanged(boolean,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyPendingSystemUpdate(long)> -> _SOURCE_
android.permission.NOTIFY_PENDING_SYSTEM_UPDATE
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reboot(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeKeyPair(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeUser(android.content.ComponentName,android.os.UserHandle)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedFingerprintAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardDismissed(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardSecured(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulFingerprintAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean requestBugreport(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
<com.android.server.devicepolicy.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAffiliationIds(android.content.ComponentName,java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeRequired(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setForceEphemeralUsers(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeepUninstalledPackages(android.content.ComponentName,java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyguardDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMasterVolumeMuted(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColor(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColorForUser(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] setPackagesSuspended(android.content.ComponentName,java.lang.String[],boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionPolicy(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileEnabled(android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileName(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setScreenCaptureDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabled(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserProvisioningState(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: boolean switchUser(android.content.ComponentName,android.os.UserHandle)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallCaCerts(android.content.ComponentName,java.lang.String[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_CA_CERTIFICATES
<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS, android.permission.MANAGE_USERS
<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeData(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.display.DisplayManagerService.BinderService: void connectWifiDisplay(java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)> -> _SOURCE_
android.permission.CAPTURE_SECURE_VIDEO_OUTPUT, android.permission.CAPTURE_VIDEO_OUTPUT
<com.android.server.display.DisplayManagerService.BinderService: void forgetWifiDisplay(java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: void pauseWifiDisplay()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: void renameWifiDisplay(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: void requestColorTransform(int,int)> -> _SOURCE_
android.permission.CONFIGURE_DISPLAY_COLOR_TRANSFORM
<com.android.server.display.DisplayManagerService.BinderService: void resumeWifiDisplay()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: void startWifiDisplayScan()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService.BinderService: void stopWifiDisplayScan()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.dreams.DreamManagerService.BinderService: void awaken()> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: void dream()> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: android.content.ComponentName getDefaultDreamComponent()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: android.content.ComponentName[] getDreamComponents()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: boolean isDreaming()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: void setDreamComponents(android.content.ComponentName[])> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService.BinderService: void testDream(android.content.ComponentName)> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration getConfiguration()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ethernet.EthernetServiceImpl: boolean isAvailable()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ethernet.EthernetServiceImpl: void removeListener(android.net.IEthernetServiceListener)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ethernet.EthernetServiceImpl: void setConfiguration(android.net.IpConfiguration)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT, android.permission.USE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.USE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void cancelEnrollment(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void enroll(android.os.IBinder,byte[],int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: java.util.List getEnrolledFingerprints(int,java.lang.String)> -> _SOURCE_
android.permission.USE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: boolean hasEnrolledFingerprints(int,java.lang.String)> -> _SOURCE_
android.permission.USE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: boolean isHardwareDetected(long,java.lang.String)> -> _SOURCE_
android.permission.USE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: int postEnroll(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: long preEnroll(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void rename(int,int,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void resetTimeout(byte[])> -> _SOURCE_
android.permission.RESET_FINGERPRINT_LOCKOUT
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void setActiveUser(int)> -> _SOURCE_
android.permission.MANAGE_FINGERPRINT
<com.android.server.hdmi.HdmiControlService.BinderService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void addSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: boolean canChangeSystemAudioMode()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void clearTimerRecording(int,int,byte[])> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: java.util.List getDeviceList()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: java.util.List getInputDevices()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: java.util.List getPortInfo()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: I[] getSupportedTypes()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: boolean getSystemAudioMode()> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void portSelect(int,android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void sendKeyEvent(int,int,boolean)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void sendMhlVendorCommand(int,int,int,byte[])> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void sendStandby(int,int)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void sendVendorCommand(int,int,byte[],boolean)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setArcMode(boolean)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setProhibitMode(boolean)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setSystemAudioMute(boolean)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void setSystemAudioVolume(int,int,int)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void startOneTouchRecord(int,byte[])> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void startTimerRecording(int,int,byte[])> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.hdmi.HdmiControlService.BinderService: void stopOneTouchRecord(int)> -> _SOURCE_
android.permission.HDMI_CEC
<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: int isInTabletMode()> -> _SOURCE_
android.permission.TABLET_MODE
<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)> -> _SOURCE_
android.permission.TABLET_MODE
<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)> -> _SOURCE_
android.permission.SET_INPUT_CALIBRATION
<com.android.server.input.InputManagerService: void tryPointerSpeed(int)> -> _SOURCE_
android.permission.SET_POINTER_SPEED
<com.android.server.job.JobSchedulerService.JobSchedulerStub: int schedule(android.app.job.JobInfo)> -> _SOURCE_
android.permission.RECEIVE_BOOT_COMPLETED
<com.android.server.job.JobSchedulerService.JobSchedulerStub: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL, android.permission.UPDATE_DEVICE_STATS
<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.media.MediaSessionRecord.SessionStub: void setFlags(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.media.projection.MediaProjectionManagerService.BinderService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)> -> _SOURCE_
android.permission.MANAGE_MEDIA_PROJECTION
<com.android.server.media.projection.MediaProjectionManagerService.BinderService: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.MANAGE_MEDIA_PROJECTION
<com.android.server.media.projection.MediaProjectionManagerService.BinderService: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()> -> _SOURCE_
android.permission.MANAGE_MEDIA_PROJECTION
<com.android.server.media.projection.MediaProjectionManagerService.BinderService: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)> -> _SOURCE_
android.permission.MANAGE_MEDIA_PROJECTION
<com.android.server.media.projection.MediaProjectionManagerService.BinderService: void stopActiveProjection()> -> _SOURCE_
android.permission.MANAGE_MEDIA_PROJECTION
<com.android.server.net.NetworkPolicyManagerService: void addRestrictBackgroundWhitelistedUid(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void addUidPolicy(int,int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void factoryReset(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL, android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: int getRestrictBackgroundByCaller()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkPolicyManagerService: I[] getRestrictBackgroundWhitelistedUids()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: I[] getUidsWithPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void onTetheringChanged(java.lang.String,boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkPolicyManagerService: void removeRestrictBackgroundWhitelistedUid(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void removeUidPolicy(int,int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setConnectivityListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkPolicyManagerService: void setDeviceIdleMode(boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: void forceUpdate()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void forceUpdateIfaces()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS, android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.pm.PackageInstallerService: void setPermissionsResult(int,boolean)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageInstallerService: void uninstall(java.lang.String,java.lang.String,int,android.content.IntentSender,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES
<com.android.server.pm.PackageManagerService: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)> -> _SOURCE_
android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SOURCE_
android.permission.CLEAR_APP_USER_DATA, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void clearCrossProfileIntentFilters(int,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.DELETE_CACHE_FILES, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.DELETE_CACHE_FILES, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PACKAGE_VERIFICATION_AGENT, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,android.content.IntentSender)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(java.lang.String,long,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivities(java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int getMoveStatus(int)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.pm.PackageManagerService: I[] getPackageGids(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
android.permission.GET_PACKAGE_SIZE, android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
android.permission.PACKAGE_VERIFICATION_AGENT
<com.android.server.pm.PackageManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void installPackageAsUser(java.lang.String,android.content.pm.IPackageInstallObserver2,int,java.lang.String,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS, android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: boolean isEphemeralApplication(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean isPackageAvailable(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int movePackage(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MOVE_PACKAGE, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: int movePrimaryStorage(java.lang.String)> -> _SOURCE_
android.permission.MOVE_PACKAGE
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void resetApplicationPreferences(int)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void resetRuntimePermissions()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void revokeRuntimePermission(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.pm.PackageManagerService: boolean setBlockUninstallForUser(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean setDefaultBrowserPackageName(java.lang.String,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void setHomeActivity(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.pm.PackageManagerService: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void systemReady()> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: boolean updateIntentVerificationStatus(java.lang.String,int,int)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: void updatePermissionFlagsForAllApps(int,int,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.REVOKE_RUNTIME_PERMISSIONS
<com.android.server.pm.PackageManagerService: void verifyIntentFilter(int,int,java.util.List)> -> _SOURCE_
android.permission.INTENT_FILTER_VERIFICATION_AGENT
<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)> -> _SOURCE_
android.permission.GRANT_RUNTIME_PERMISSIONS, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PACKAGE_VERIFICATION_AGENT, android.permission.REVOKE_RUNTIME_PERMISSIONS, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.ShortcutService: void onApplicationActive(java.lang.String,int)> -> _SOURCE_
android.permission.RESET_SHORTCUT_MANAGER_THROTTLING
<com.android.server.power.PowerManagerService.BinderService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService.BinderService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService.BinderService: void boostScreenBrightness(long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void crash(java.lang.String)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService.BinderService: void goToSleep(long,int,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void nap(long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void powerHint(int,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void reboot(boolean,java.lang.String,boolean)> -> _SOURCE_
android.permission.REBOOT, android.permission.RECOVERY
<com.android.server.power.PowerManagerService.BinderService: void rebootSafeMode(boolean,boolean)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService.BinderService: void releaseWakeLock(android.os.IBinder,int)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService.BinderService: void setAttentionLight(boolean,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: boolean setPowerSaveMode(boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void setTemporaryScreenBrightnessSettingOverride(int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void shutdown(boolean,java.lang.String,boolean)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService.BinderService: void updateWakeLockUids(android.os.IBinder,int[])> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService.BinderService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService.BinderService: void userActivity(long,int,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService.BinderService: void wakeUp(long,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.print.PrintManagerService.PrintManagerImpl: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService.PrintManagerImpl: void cancelPrintJob(android.print.PrintJobId,int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService.PrintManagerImpl: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService.PrintManagerImpl: java.util.List getPrintJobInfos(int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService.PrintManagerImpl: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService.PrintManagerImpl: void restartPrintJob(android.print.PrintJobId,int,int)> -> _SOURCE_
com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.sip.SipService: void close(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isOpened(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.soundtrigger.SoundTriggerService.SoundTriggerServiceStub: void deleteSoundModel(android.os.ParcelUuid)> -> _SOURCE_
android.permission.MANAGE_SOUND_TRIGGER
<com.android.server.soundtrigger.SoundTriggerService.SoundTriggerServiceStub: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)> -> _SOURCE_
android.permission.MANAGE_SOUND_TRIGGER
<com.android.server.soundtrigger.SoundTriggerService.SoundTriggerServiceStub: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)> -> _SOURCE_
android.permission.MANAGE_SOUND_TRIGGER
<com.android.server.soundtrigger.SoundTriggerService.SoundTriggerServiceStub: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)> -> _SOURCE_
android.permission.MANAGE_SOUND_TRIGGER
<com.android.server.soundtrigger.SoundTriggerService.SoundTriggerServiceStub: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)> -> _SOURCE_
android.permission.MANAGE_SOUND_TRIGGER
<com.android.server.statusbar.StatusBarManagerService: void addTile(android.content.ComponentName)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void clearNotificationEffects()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void clickTile(android.content.ComponentName)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void collapsePanels()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void disable2(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void disableForUser(int,android.os.IBinder,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void expandNotificationsPanel()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void expandSettingsPanel(java.lang.String)> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void onClearAllNotifications(int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationClick(java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onNotificationVisibilityChanged(com.android.internal.statusbar.NotificationVisibility[],com.android.internal.statusbar.NotificationVisibility[])> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onPanelHidden()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void onPanelRevealed(boolean,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void registerStatusBar(com.android.internal.statusbar.IStatusBar,java.util.List,java.util.List,int[],java.util.List,android.graphics.Rect,android.graphics.Rect)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.statusbar.StatusBarManagerService: void remTile(android.content.ComponentName)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void removeIcon(java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int,boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.statusbar.StatusBarManagerService: void setSystemUiVisibility(int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.tv.TvInputManagerService.BinderService: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int)> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.tv.TvInputManagerService.BinderService: void addBlockedRating(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PARENTAL_CONTROLS
<com.android.server.tv.TvInputManagerService.BinderService: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)> -> _SOURCE_
android.permission.CAPTURE_TV_INPUT
<com.android.server.tv.TvInputManagerService.BinderService: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)> -> _SOURCE_
android.permission.CAPTURE_TV_INPUT
<com.android.server.tv.TvInputManagerService.BinderService: java.util.List getDvbDeviceList()> -> _SOURCE_
android.permission.DVB_DEVICE
<com.android.server.tv.TvInputManagerService.BinderService: java.util.List getHardwareList()> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.tv.TvInputManagerService.BinderService: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)> -> _SOURCE_
android.permission.DVB_DEVICE
<com.android.server.tv.TvInputManagerService.BinderService: void releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.tv.TvInputManagerService.BinderService: void removeBlockedRating(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PARENTAL_CONTROLS
<com.android.server.tv.TvInputManagerService.BinderService: void setParentalControlsEnabled(boolean,int)> -> _SOURCE_
android.permission.MODIFY_PARENTAL_CONTROLS
<com.android.server.tv.TvInputManagerService.BinderService: void unblockContent(android.os.IBinder,java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_PARENTAL_CONTROLS
<com.android.server.tv.TvInputManagerService.ServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.tv.TvInputManagerService.ServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.tv.TvInputManagerService.ServiceCallback: void removeHardwareInput(java.lang.String)> -> _SOURCE_
android.permission.TV_INPUT_HARDWARE
<com.android.server.usage.UsageStatsService.BinderService: void onCarrierPrivilegedAppsChanged()> -> _SOURCE_
android.permission.BIND_CARRIER_SERVICES
<com.android.server.usage.UsageStatsService.BinderService: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.usage.UsageStatsService.BinderService: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.usage.UsageStatsService.BinderService: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.usage.UsageStatsService.BinderService: void setAppInactive(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.CHANGE_APP_IDLE_STATE
<com.android.server.usb.UsbService: void allowUsbDebugging(boolean,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void clearUsbDebuggingKeys()> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void denyUsbDebugging()> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: android.hardware.usb.UsbPort[] getPorts()> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: boolean isFunctionEnabled(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setPortRoles(java.lang.String,int,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setUsbDataUnlocked(boolean)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: boolean activeServiceSupportsAssist()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: boolean activeServiceSupportsLaunchFromKeyguard()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: int deleteKeyphraseSoundModel(int,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_VOICE_KEYPHRASES
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: android.content.ComponentName getActiveServiceComponentName()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_VOICE_KEYPHRASES
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: void hideCurrentSession()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: boolean isSessionRunning()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: void launchVoiceAssistFromKeyguard()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: void onLockscreenShown()> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_VOICE_INTERACTION_SERVICE
<com.android.server.voiceinteraction.VoiceInteractionManagerService.VoiceInteractionManagerServiceStub: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)> -> _SOURCE_
android.permission.MANAGE_VOICE_KEYPHRASES
<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaper(java.lang.String,int,int)> -> _SOURCE_
android.permission.SET_WALLPAPER
<com.android.server.wallpaper.WallpaperManagerService: void setDimensionHints(int,int,java.lang.String)> -> _SOURCE_
android.permission.SET_WALLPAPER_HINTS
<com.android.server.wallpaper.WallpaperManagerService: void setDisplayPadding(android.graphics.Rect,java.lang.String)> -> _SOURCE_
android.permission.SET_WALLPAPER_HINTS
<com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)> -> _SOURCE_
android.permission.INTERNAL_SYSTEM_WINDOW
<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback)> -> _SOURCE_
android.permission.SET_WALLPAPER
<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.SET_WALLPAPER_COMPONENT
<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.SET_WALLPAPER_COMPONENT
<com.android.server.webkit.WebViewUpdateService.BinderService: java.lang.String changeProviderAndSetting(java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.webkit.WebViewUpdateService.BinderService: void enableFallbackLogic(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wifi.WifiServiceImpl: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiServiceImpl: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.wifi.WifiServiceImpl: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void addToBlacklist(java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void clearBlacklist()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void disableEphemeralNetwork(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean disableNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void disconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void enableAggressiveHandover(int)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean enableNetwork(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void enableVerboseLogging(int)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void enableWifiConnectivityManager(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiServiceImpl: void factoryReset()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiServiceImpl: int getAggressiveHandover()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: int getAllowScansWithTraffic()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: java.lang.String getConfigFile()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: java.util.List getConfiguredNetworks()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiInfo getConnectionInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConnectionStatistics getConnectionStatistics()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL
<com.android.server.wifi.WifiServiceImpl: java.lang.String getCountryCode()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiServiceImpl: android.net.Network getCurrentNetwork()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.DhcpInfo getDhcpInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean getEnableAutoJoinWhenAssociated()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: int getFrequencyBand()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: java.util.List getPrivilegedConfiguredNetworks()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.READ_WIFI_CREDENTIAL
<com.android.server.wifi.WifiServiceImpl: java.util.List getScanResults(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.PEERS_MAC_ADDRESS, android.permission.SCORE_NETWORKS
<com.android.server.wifi.WifiServiceImpl: int getSupportedFeatures()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: int getVerboseLoggingLevel()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: int getWifiApEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: int getWifiEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.os.Messenger getWifiServiceMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: java.lang.String getWpsNfcConfigurationToken(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiServiceImpl: void initializeMulticastFiltering()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiServiceImpl: boolean isMulticastEnabled()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean isScanAlwaysAvailable()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean pingSupplicant()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void reassociate()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void reconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void releaseMulticastLock()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiServiceImpl: boolean releaseWifiLock(android.os.IBinder)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.wifi.WifiServiceImpl: boolean removeNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiActivityEnergyInfo reportActivityInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void requestActivityInfo(android.os.ResultReceiver)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: boolean saveConfiguration()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void setAllowScansWithTraffic(int)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void setCountryCode(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiServiceImpl: boolean setEnableAutoJoinWhenAssociated(boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void setFrequencyBand(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE, android.permission.TETHER_PRIVILEGED
<com.android.server.wifi.WifiServiceImpl: boolean setWifiEnabled(boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiServiceImpl: void startScan(android.net.wifi.ScanSettings,android.os.WorkSource)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE, android.permission.UPDATE_DEVICE_STATS
<com.android.server.wifi.WifiServiceImpl: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.wifi.p2p.WifiP2pServiceImpl: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.p2p.WifiP2pServiceImpl: android.os.Messenger getP2pStateMachineMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE, android.permission.CONNECTIVITY_INTERNAL, android.permission.LOCATION_HARDWARE
<com.android.server.wifi.p2p.WifiP2pServiceImpl: void setMiracastMode(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,int,boolean,boolean,int,int,boolean,boolean,android.graphics.Rect,android.content.res.Configuration,int,boolean,boolean,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensity(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: boolean clearWindowContentFrameStats(android.os.IBinder)> -> _SOURCE_
android.permission.FRAME_STATS
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void executeAppTransition()> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void freezeRotation(int)> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)> -> _SOURCE_
android.permission.FRAME_STATS
<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void keyguardGoingAway(int)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.wm.WindowManagerService: void notifyAppStopped(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void pauseKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void registerDockedStackListener(android.view.IDockedStackListener)> -> _SOURCE_
android.permission.REGISTER_WINDOW_MANAGER_LISTENERS
<com.android.server.wm.WindowManagerService: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)> -> _SOURCE_
android.permission.REGISTER_WINDOW_MANAGER_LISTENERS
<com.android.server.wm.WindowManagerService: void removeAppToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: boolean requestAssistScreenshot(com.android.internal.app.IAssistScreenshotReceiver)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.wm.WindowManagerService: void resumeKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,float)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: boolean setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppTask(android.os.IBinder,int,int,android.graphics.Rect,android.content.res.Configuration,int,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void setForcedDisplayScalingMode(int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: I[] setNewConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> -> _SOURCE_
android.permission.FREEZE_SCREEN
<com.android.server.wm.WindowManagerService: boolean startViewServer(int)> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.wm.WindowManagerService: void stopAppFreezingScreen(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void stopFreezingScreen()> -> _SOURCE_
android.permission.FREEZE_SCREEN
<com.android.server.wm.WindowManagerService: boolean stopViewServer()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void thawRotation()> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
