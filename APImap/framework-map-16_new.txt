<android.accounts.AbstractAccountAuthenticator.Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManagerService: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
android.permission.GET_ACCOUNTS
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.GET_ACCOUNTS
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -> _SOURCE_
android.permission.USE_CREDENTIALS
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> -> _SOURCE_
android.permission.GET_ACCOUNTS
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<android.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<android.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<android.content.ContentService: java.util.List getCurrentSyncs()> -> _SOURCE_
android.permission.READ_SYNC_STATS
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<android.content.ContentService: boolean getMasterSyncAutomatically()> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<android.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<android.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<android.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<android.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<android.media.AudioService: void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<android.media.AudioService: void setBluetoothScoOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void setMode(int,android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)> -> _SOURCE_
android.permission.REMOTE_AUDIO_PLAYBACK
<android.media.AudioService: void setSpeakerphoneOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void unregisterMediaButtonEventReceiverForCalls()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<android.server.BluetoothA2dpService: boolean allowIncomingConnect(android.bluetooth.BluetoothDevice,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothA2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothA2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothA2dpService: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothA2dpService: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean allowIncomingProfileConnect(android.bluetooth.BluetoothDevice,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean cancelDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean changeApplicationBluetoothState(boolean,android.bluetooth.IBluetoothStateChangeCallback,android.os.IBinder)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean connectHeadset(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean createBond(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean disable(boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean disconnectHeadset(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean enable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean enableNoAutoConnect()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.lang.String getAddress()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getBluetoothState()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getBondState(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getConnectedHealthDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getConnectedInputDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getConnectedPanDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getDiscoverableTimeout()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getInputDevicePriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getInputDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.lang.String getName()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.util.List getPanDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getProfileConnectionState(int)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.lang.String getRemoteAlias(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getRemoteClass(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.lang.String getRemoteName(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: int getScanMode()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean getTrustState(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean isDiscovering()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean isEnabled()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean isTetheringOn()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: java.lang.String[] listBonds()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: B[] readOutOfBandData()> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean removeBond(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: void removeServiceRecord(int)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: void setBluetoothTethering(boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setName(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setPairingConfirmation(java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setPasskey(java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setPin(java.lang.String,byte[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setRemoteAlias(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<android.server.BluetoothService: boolean setRemoteOutOfBandData(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean setScanMode(int,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.WRITE_SECURE_SETTINGS
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean startDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<android.server.BluetoothService: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.email.provider.AttachmentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
com.android.email.permission.ACCESS_PROVIDER
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SOURCE_
android.permission.SEND_SMS
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
android.permission.CALL_PRIVILEGED
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> -> _SOURCE_
android.permission.RECEIVE_SMS
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> -> _SOURCE_
android.permission.RECEIVE_SMS, android.permission.SEND_SMS
<com.android.nfc.NfcService.NfcAdapterExtrasService: void authenticate(java.lang.String,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle close(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle transceive(java.lang.String,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: boolean disable(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean disableNdefPush()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: void dispatch(android.nfc.Tag)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean enable()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean enableNdefPush()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setNdefPushCallback(android.nfc.INdefPushCallback)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setP2pModes(int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.TagService: int close(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int connect(int,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int formatNdef(int,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: I[] getTechList(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int getTimeout(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: boolean isNdef(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int ndefMakeReadOnly(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.NdefMessage ndefRead(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int ndefWrite(int,android.nfc.NdefMessage)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int reconnect(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.Tag rediscover(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: void resetTimeouts()> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int setTimeout(int,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.TransceiveResult transceive(int,byte[],boolean)> -> _SOURCE_
android.permission.NFC
<com.android.phone.PhoneInterfaceManager: void answerRingingCall()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String)> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: void cancelMissedCallsNotification()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void disableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: int enableApnType(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void enableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: boolean endCall()> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void silenceRinger()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.providers.contacts.AbstractContactsProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
android.permission.WRITE_PROFILE
<com.android.providers.contacts.AbstractContactsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_PROFILE
<com.android.providers.contacts.AbstractContactsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.WRITE_PROFILE
<com.android.providers.contacts.AbstractContactsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_PROFILE
<com.android.providers.contacts.CallLogProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.CallLogProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.CallLogProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.ContactsProvider2: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM
<com.android.providers.contacts.ContactsProvider2: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM
<com.android.providers.contacts.ContactsProvider2: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM, android.permission.WRITE_SOCIAL_STREAM
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM
<com.android.providers.contacts.ContactsProvider2: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM, android.permission.WRITE_SOCIAL_STREAM
<com.android.providers.contacts.ContactsProvider2: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM, android.permission.WRITE_SOCIAL_STREAM
<com.android.providers.contacts.ProfileProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SOURCE_
android.permission.READ_PROFILE, android.permission.WRITE_PROFILE
<com.android.providers.contacts.VoicemailContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.VoicemailContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.VoicemailContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.contacts.VoicemailContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
com.android.voicemail.permission.ADD_VOICEMAIL
<com.android.providers.downloads.DownloadProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.ACCESS_ALL_DOWNLOADS
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.ACCESS_CACHE_FILESYSTEM, android.permission.ACCESS_DOWNLOAD_MANAGER, android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED, android.permission.DOWNLOAD_CACHE_NON_PURGEABLE, android.permission.DOWNLOAD_WITHOUT_NOTIFICATION, android.permission.INTERNET, android.permission.WRITE_EXTERNAL_STORAGE
<com.android.providers.downloads.DownloadProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_ALL_DOWNLOADS
<com.android.providers.downloads.DownloadProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.ACCESS_ALL_DOWNLOADS
<com.android.providers.drm.DrmProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.ACCESS_DRM
<com.android.providers.drm.DrmProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.INSTALL_DRM
<com.android.providers.drm.DrmProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.ACCESS_DRM
<com.android.providers.media.MediaProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_CACHE_FILESYSTEM, android.permission.READ_EXTERNAL_STORAGE, android.permission.WRITE_EXTERNAL_STORAGE
<com.android.providers.settings.SettingsProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.providers.settings.SettingsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.providers.settings.SettingsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.providers.settings.SettingsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_DRM
<com.android.providers.settings.SettingsProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_DRM
<com.android.providers.settings.SettingsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.providers.telephony.TelephonyProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_APN_SETTINGS
<com.android.providers.telephony.TelephonyProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
android.permission.WRITE_APN_SETTINGS
<com.android.providers.telephony.TelephonyProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.WRITE_APN_SETTINGS
<com.android.server.AlarmManagerService: void setTime(long)> -> _SOURCE_
android.permission.SET_TIME
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> -> _SOURCE_
android.permission.SET_TIME_ZONE
<com.android.server.AppWidgetService: void bindAppWidgetId(int,android.content.ComponentName)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void deleteAppWidgetId(int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChanged(int[],int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void setBindAppWidgetPermission(java.lang.String,boolean)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.AppWidgetService: void unbindRemoteViewsService(int,android.content.Intent)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetIds(int[],android.widget.RemoteViews)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetOptions(int,android.os.Bundle)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.BackupManagerService.ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void backupNow()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void dataChanged(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void fullRestore(android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean hasBackupPassword()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean isBackupEnabled()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String[] listAllTransports()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setAutoRestore(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setBackupEnabled(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int getNetworkPreference()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isTetheringSupported()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: void reportInetCondition(int,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setDataDependency(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void setNetworkPreference(int)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void setPolicyDataEnable(int,boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: boolean setRadios(boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: int tether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: int untether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt()> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt()> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SOURCE_
android.permission.READ_LOGS
<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> -> _SOURCE_
android.permission.INSTALL_LOCATION_PROVIDER
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.MountService: int changeEncryptionPassword(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int decryptStorage(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int destroySecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_DESTROY
<com.android.server.MountService: int encryptStorage(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int finalizeSecureContainer(java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int formatVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: int getEncryptionState()> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String[] getSecureContainerList()> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: I[] getStorageUsers(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: boolean isSecureContainerMounted(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: int mountSecureContainer(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: int mountVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int renameSecureContainer(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.ASEC_RENAME
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.MountService: int unmountSecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: void unmountVolume(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.NetworkManagementService: void addRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void flushDefaultDnsCache()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void flushInterfaceDnsCache(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isTetheringStarted()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTtys()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void shutdown()> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopAccessPoint(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopTethering()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NsdService: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.INTERNET
<com.android.server.NsdService: void setEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.PowerManagerService: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
<com.android.server.PowerManagerService: void clearUserActivityTimeout(long,long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void crash(java.lang.String)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.PowerManagerService: void goToSleep(long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void goToSleepWithReason(long,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void preventScreenOn(boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void reboot(java.lang.String)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> -> _SOURCE_
android.permission.DEVICE_POWER, android.permission.WAKE_LOCK
<com.android.server.PowerManagerService: void setAttentionLight(boolean,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void setAutoBrightnessAdjustment(float)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void setBacklightBrightness(int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void setMaximumScreenOffTimeount(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.PowerManagerService: void setPokeLock(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void setStayOnSetting(int)> -> _SOURCE_
android.permission.WRITE_SETTINGS
<com.android.server.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.PowerManagerService: void userActivity(long,boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.PowerManagerService: void userActivityWithForce(long,boolean,boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.SerialService: java.lang.String[] getSerialPorts()> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.StatusBarManagerService: void collapse()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void expand()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.StatusBarManagerService: void onClearAllNotifications()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationClick(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onPanelRevealed()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,int[],java.util.List)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void removeIcon(java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setSystemUiVisibility(int,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void topAppWindowChanged(boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellInfo(android.telephony.CellInfo)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: java.lang.String getHelpUri()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: long getResetTime(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> -> _SOURCE_
android.permission.VIBRATE
<com.android.server.VibratorService: void vibrate(long,android.os.IBinder)> -> _SOURCE_
android.permission.VIBRATE
<com.android.server.VibratorService: void vibratePattern(long[],int,android.os.IBinder)> -> _SOURCE_
android.permission.VIBRATE
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> -> _SOURCE_
android.permission.SET_WALLPAPER_HINTS
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SOURCE_
android.permission.SET_WALLPAPER
<com.android.server.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.SET_WALLPAPER_COMPONENT
<com.android.server.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void addToBlacklist(java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void clearBlacklist()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: boolean disableNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void disconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: boolean enableNetwork(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: java.lang.String getConfigFile()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: int getFrequencyBand()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: java.util.List getScanResults()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: int getWifiApEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: int getWifiEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: android.os.Messenger getWifiServiceMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: android.os.Messenger getWifiStateMachineMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void initializeMulticastFiltering()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.WifiService: boolean isMulticastEnabled()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: boolean pingSupplicant()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.WifiService: void reassociate()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void reconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void releaseMulticastLock()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.WifiService: boolean releaseWifiLock(android.os.IBinder)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.WifiService: boolean removeNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: boolean saveConfiguration()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void startScan(boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void startWifi()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void stopWifi()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.WifiService: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.ActivityManagerService: void activitySlept(android.os.IBinder)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SOURCE_
android.permission.BACKUP, android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: void dismissKeyguardOnNextActivity()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.FORCE_STOP_PACKAGES, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int)> -> _SOURCE_
android.permission.GET_TASKS
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> -> _SOURCE_
android.permission.GET_TASKS
<com.android.server.am.ActivityManagerService: void goingToSleep()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.KILL_BACKGROUND_PROCESSES, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)> -> _SOURCE_
android.permission.KILL_BACKGROUND_PROCESSES
<com.android.server.am.ActivityManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.REORDER_TASKS, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY, android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean removeSubTask(int,int)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: boolean removeTask(int,int)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: void resumeAppSwitches()> -> _SOURCE_
android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> -> _SOURCE_
android.permission.SET_ALWAYS_FINISH
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_SCREEN_COMPATIBILITY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_SCREEN_COMPATIBILITY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_PROCESS_LIMIT, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SET_PROCESS_LIMIT, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.SHUTDOWN, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> -> _SOURCE_
android.permission.SIGNAL_PERSISTENT_PROCESSES
<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivitiesInPackage(int,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityInPackage(int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void stopAppSwitches()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY, android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: boolean switchUser(int)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY
<com.android.server.am.ActivityManagerService: void unhandledBack()> -> _SOURCE_
android.permission.FORCE_BACK
<com.android.server.am.ActivityManagerService: void unregisterReceiver(android.content.IIntentReceiver)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.ActivityManagerService: void wakingUp()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.DEVICE_POWER, android.permission.START_ANY_ACTIVITY
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: B[] getStatistics()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: void noteBluetoothOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteInputEvent()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneState(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScanWifiLockAcquired(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScanWifiLockAcquiredFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScanWifiLockReleased(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScanWifiLockReleasedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.UsageStatsService: void noteLaunchTime(android.content.ComponentName,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.UsageStatsService: void notePauseComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.UsageStatsService: void noteResumeComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void tryPointerSpeed(int)> -> _SOURCE_
android.permission.SET_POINTER_SPEED
<com.android.server.net.NetworkPolicyManagerService: int getAppPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: I[] getAppsWithPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PHONE_STATE
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkPolicyManagerService: void setAppPolicy(int,int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: void forceUpdate()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSession()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SOURCE_
android.permission.CLEAR_APP_USER_DATA
<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.DELETE_CACHE_FILES
<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
android.permission.GET_PACKAGE_SIZE
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
android.permission.PACKAGE_VERIFICATION_AGENT
<com.android.server.pm.PackageManagerService: void grantPermission(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageManagerService: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageManagerService: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)> -> _SOURCE_
android.permission.MOVE_PACKAGE
<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void revokePermission(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE
<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.sip.SipService: void close(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.usb.UsbService: void clearDefaults(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setMassStorageBackingFile(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void executeAppTransition()> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void freezeRotation(int)> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void moveAppToken(int,android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void moveAppTokensToBottom(java.util.List)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void moveAppTokensToTop(java.util.List)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void pauseKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void removeAppToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void resumeKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAppGroupId(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppWillBeHidden(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: boolean startViewServer(int)> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.wm.WindowManagerService: void stopAppFreezingScreen(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: boolean stopViewServer()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void thawRotation()> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.ti.server.StubFmService: boolean resumeFm()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxChangeAudioTarget(int,int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxChangeDigitalTargetConfiguration(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxCompleteScan_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxDisable()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxDisableAudioRouting()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxDisableRds()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxDisableRds_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxEnable()> -> _SOURCE_
ti.permission.FMRX, ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxEnableAudioRouting()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxEnableRds()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxEnableRds_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetBand()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetBand_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetChannelSpacing()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetChannelSpacing_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetCompleteScanProgress()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetCompleteScanProgress_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetDeEmphasisFilter()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetDeEmphasisFilter_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetFMState()> -> _SOURCE_
ti.permission.FMRX
<com.ti.server.StubFmService: double rxGetFwVersion()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetMonoStereoMode()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetMonoStereoMode_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetMuteMode()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetMuteMode_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetRdsAfSwitchMode()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRdsAfSwitchMode_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: long rxGetRdsGroupMask()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRdsGroupMask_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetRdsSystem()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRdsSystem_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetRfDependentMuteMode()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRfDependentMuteMode_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetRssi()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetRssiThreshold()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRssiThreshold_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetRssi_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetTunedFrequency()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetTunedFrequency_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxGetVolume()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxGetVolume_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxIsEnabled()> -> _SOURCE_
ti.permission.FMRX
<com.ti.server.StubFmService: boolean rxIsFMPaused()> -> _SOURCE_
ti.permission.FMRX
<com.ti.server.StubFmService: boolean rxIsValidChannel()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSeek_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetBand(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetBand_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetChannelSpacing(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetChannelSpacing_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetDeEmphasisFilter(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetDeEmphasisFilter_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetMonoStereoMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetMonoStereoMode_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetMuteMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetMuteMode_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsAfSwitchMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsAfSwitchMode_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsGroupMask(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsGroupMask_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsSystem(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRdsSystem_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRfDependentMuteMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRfDependentMuteMode_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRssiThreshold(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetRssiThreshold_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxSetVolume(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int rxStopCompleteScan()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxStopCompleteScan_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxStopSeek()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxStopSeek_nb()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean rxTune_nb(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txChangeAudioSource(int,int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txChangeDigitalSourceConfiguration(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txDisable()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txDisableRds()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txEnable()> -> _SOURCE_
ti.permission.FMRX, ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txEnableRds()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: int txGetFMState()> -> _SOURCE_
ti.permission.FMRX
<com.ti.server.StubFmService: boolean txSetMonoStereoMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetMuteMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetPowerLevel(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetPreEmphasisFilter(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsAfCode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsECC(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsMusicSpeechFlag(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsPiCode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsPsDisplayMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsPsScrollSpeed(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsPtyCode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTextPsMsg(java.lang.String)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTextRepertoire(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTextRtMsg(int,java.lang.String,int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTrafficCodes(int,int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTransmissionMode(int)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txSetRdsTransmittedGroupsMask(long)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txStartTransmission()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txStopTransmission()> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txTune(long)> -> _SOURCE_
ti.permission.FMRX_ADMIN
<com.ti.server.StubFmService: boolean txWriteRdsRawData(java.lang.String)> -> _SOURCE_
ti.permission.FMRX_ADMIN
