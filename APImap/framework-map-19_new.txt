<android.accounts.AbstractAccountAuthenticator.Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.accounts.AbstractAccountAuthenticator.Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCOUNT_MANAGER
<android.media.AudioService: void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<android.media.AudioService: boolean registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)> -> _SOURCE_
android.permission.MEDIA_CONTENT_CONTROL
<android.media.AudioService: boolean registerRemoteController(android.media.IRemoteControlDisplay,int,int,android.content.ComponentName)> -> _SOURCE_
android.permission.MEDIA_CONTENT_CONTROL
<android.media.AudioService: void setBluetoothScoOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void setMode(int,android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)> -> _SOURCE_
android.permission.REMOTE_AUDIO_PLAYBACK
<android.media.AudioService: void setSpeakerphoneOn(boolean)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void startBluetoothSco(android.os.IBinder,int)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> -> _SOURCE_
android.permission.MODIFY_AUDIO_SETTINGS
<android.media.AudioService: void unregisterMediaButtonEventReceiverForCalls()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<android.net.wifi.p2p.WifiP2pService: void setMiracastMode(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.a2dp.A2dpService.BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean cancelDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean configHciSnoopLog(boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean disable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean enable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean enableNoAutoConnect()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getAdapterConnectionState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getAddress()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getDiscoverableTimeout()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getName()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getProfileConnectionState(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getScanMode()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: int getState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isDiscovering()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean isEnabled()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setDiscoverableTimeout(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setName(java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean setScanMode(int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.btservice.AdapterService.AdapterServiceBinder: boolean startDiscovery()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clearServices(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void clientDisconnect(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void discoverServices(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void endServiceDeclaration(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: B[] getAdvManufacturerData()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: B[] getAdvServiceData()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: java.util.List getAdvServiceUuids()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: boolean isAdvertising()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void refreshDevice(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void removeAdvManufacturerCodeAndData(int)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void serverDisconnect(int,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: boolean setAdvManufacturerCodeAndData(int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: boolean setAdvServiceData(byte[])> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void startAdvertising(int)> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void startScan(int,boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void stopAdvertising()> -> _SOURCE_
android.permission.BLUETOOTH_PRIVILEGED
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void stopScan(int,boolean)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void unregisterClient(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void unregisterServer(int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.gatt.GattService.BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hdp.HealthService.BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean connectAudio()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean disconnectAudio()> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean isAudioOn()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: void phoneStateChanged(int,int,int,java.lang.String,int)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN, android.permission.MODIFY_PHONE_STATE
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hfp.HeadsetService.BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.hid.HidService.BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: android.bluetooth.BluetoothDevice getClient()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getPriority(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: int getState()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.map.BluetoothMapService.BluetoothMapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: java.util.List getConnectedDevices()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.bluetooth.pan.PanService.BluetoothPanBinder: void setBluetoothTethering(boolean)> -> _SOURCE_
android.permission.BLUETOOTH, android.permission.BLUETOOTH_ADMIN
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> -> _SOURCE_
android.permission.READ_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_CONTACTS
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()> -> _SOURCE_
android.permission.CALL_PRIVILEGED
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.nfc.NfcService.CardEmulationService: java.util.List getServices(int,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.CardEmulationService: boolean isDefaultServiceForAid(int,android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.CardEmulationService: boolean isDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.CardEmulationService: boolean setDefaultForNextTap(int,android.content.ComponentName)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.CardEmulationService: boolean setDefaultServiceForCategory(int,android.content.ComponentName,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterExtrasService: void authenticate(java.lang.String,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle close(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterExtrasService: android.os.Bundle transceive(java.lang.String,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: boolean disable(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean disableNdefPush()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: void dispatch(android.nfc.Tag)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean enable()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: boolean enableNdefPush()> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setAppCallback(android.nfc.IAppCallback)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.NfcAdapterService: void setP2pModes(int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.nfc.NfcService.TagService: int close(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int connect(int,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int formatNdef(int,byte[])> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: I[] getTechList(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int getTimeout(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: boolean isNdef(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int ndefMakeReadOnly(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.NdefMessage ndefRead(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int ndefWrite(int,android.nfc.NdefMessage)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int reconnect(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.Tag rediscover(int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: void resetTimeouts()> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: int setTimeout(int,int)> -> _SOURCE_
android.permission.NFC
<com.android.nfc.NfcService.TagService: android.nfc.TransceiveResult transceive(int,byte[],boolean)> -> _SOURCE_
android.permission.NFC
<com.android.phone.CallCommandService: void rejectCall(com.android.services.telephony.common.Call,boolean,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.phone.PhoneInterfaceManager: void addListener(com.android.internal.telephony.ITelephonyListener)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void answerRingingCall()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: void cancelMissedCallsNotification()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void disableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: int enableApnType(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void enableLocationUpdates()> -> _SOURCE_
android.permission.CONTROL_LOCATION_UPDATES
<com.android.phone.PhoneInterfaceManager: boolean endCall()> -> _SOURCE_
android.permission.CALL_PHONE
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_FINE_LOCATION
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> -> _SOURCE_
android.permission.READ_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void merge()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void mute(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void playDtmfTone(char,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void removeListener(com.android.internal.telephony.ITelephonyListener)> -> _SOURCE_
android.permission.READ_PRIVILEGED_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean setRadioPower(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void silenceRinger()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void stopDtmfTone()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPinReportResult(java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: I[] supplyPukReportResult(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void swap()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void toggleHold()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> -> _SOURCE_
android.permission.READ_SOCIAL_STREAM
<com.android.server.AlarmManagerService: void set(int,long,long,long,android.app.PendingIntent,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.AlarmManagerService: void setTime(long)> -> _SOURCE_
android.permission.SET_TIME
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> -> _SOURCE_
android.permission.SET_TIME_ZONE
<com.android.server.AppOpsService: int checkOperation(int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,int[])> -> _SOURCE_
android.permission.GET_APP_OPS_STATS
<com.android.server.AppOpsService: java.util.List getPackagesForOps(int[])> -> _SOURCE_
android.permission.GET_APP_OPS_STATS
<com.android.server.AppOpsService: int noteOperation(int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void resetAllModes()> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: void setMode(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS
<com.android.server.AppWidgetService: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void deleteAppWidgetId(int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String,int)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChanged(int[],int,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void partiallyUpdateAppWidgetIds(int[],android.widget.RemoteViews,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void setBindAppWidgetPermission(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS
<com.android.server.AppWidgetService: void unbindRemoteViewsService(int,android.content.Intent,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetIds(int[],android.widget.RemoteViews,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetOptions(int,android.os.Bundle,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.AppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews,int)> -> _SOURCE_
android.permission.BIND_APPWIDGET
<com.android.server.BackupManagerService.ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService.ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void backupNow()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void dataChanged(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,java.lang.String[])> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void fullRestore(android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean hasBackupPassword()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean isBackupEnabled()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String[] listAllTransports()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setAutoRestore(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setBackupEnabled(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.BluetoothManagerService: boolean disable(boolean)> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: boolean enable()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()> -> _SOURCE_
android.permission.BLUETOOTH_ADMIN
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: java.lang.String getName()> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> -> _SOURCE_
android.permission.BLUETOOTH
<com.android.server.ConnectivityService: void captivePortalCheckComplete(android.net.NetworkInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void captivePortalCheckCompleted(android.net.NetworkInfo,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int checkMobileProvisioning(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int findConnectionTypeForIface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkQualityInfo getActiveLinkQualityInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.LinkQualityInfo getLinkQualityInfo(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: java.lang.String getMobileRedirectedProvisioningUrl()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: int getNetworkPreference()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: boolean isTetheringSupported()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.ConnectivityService: void markSocketAsUser(android.os.ParcelFileDescriptor,int)> -> _SOURCE_
android.permission.MARK_NETWORK_SOCKET
<com.android.server.ConnectivityService: void reportInetCondition(int,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[],java.lang.String)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setAirplaneMode(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setDataDependency(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void setNetworkPreference(int)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void setPolicyDataEnable(int,boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.ConnectivityService: void setProvisioningNotificationVisible(boolean,int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: boolean setRadios(boolean)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: void supplyMessenger(int,android.os.Messenger)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConnectivityService: int tether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: int untether(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CHANGE_NETWORK_STATE
<com.android.server.ConnectivityService: boolean updateLockdownVpn()> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE, android.permission.CONNECTIVITY_INTERNAL
<com.android.server.ConsumerIrService: I[] getCarrierFrequencies()> -> _SOURCE_
android.permission.TRANSMIT_IR
<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])> -> _SOURCE_
android.permission.TRANSMIT_IR
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()> -> _SOURCE_
android.permission.MANAGE_USERS
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean installCaCert(byte[])> -> _SOURCE_
android.permission.MANAGE_CA_CERTIFICATES
<com.android.server.DevicePolicyManagerService: boolean isActivePasswordSufficient(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void lockNow()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_DEVICE_ADMINS
<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> -> _SOURCE_
android.permission.BIND_DEVICE_ADMIN, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DevicePolicyManagerService: void uninstallCaCert(byte[])> -> _SOURCE_
android.permission.MANAGE_CA_CERTIFICATES
<com.android.server.DevicePolicyManagerService: void wipeData(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> -> _SOURCE_
android.permission.READ_LOGS
<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void hideMySoftInput(android.os.IBinder,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR
<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void removeClient(com.android.internal.view.IInputMethodClient)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR
<com.android.server.InputMethodManagerService: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: void showMySoftInput(android.os.IBinder,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR, android.permission.WRITE_SECURE_SETTINGS
<com.android.server.InputMethodManagerService: void updateStatusIcon(android.os.IBinder,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.STATUS_BAR
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> -> _SOURCE_
android.permission.INSTALL_LOCATION_PROVIDER
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.UPDATE_APP_OPS_STATS, android.permission.UPDATE_DEVICE_STATS
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.ACCESS_FINE_LOCATION, android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SOURCE_
android.permission.ACCESS_MOCK_LOCATION
<com.android.server.LockSettingsService: boolean checkPassword(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: boolean checkPattern(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.READ_PROFILE
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> -> _SOURCE_
android.permission.READ_PROFILE
<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.READ_PROFILE
<com.android.server.LockSettingsService: void removeUser(int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setBoolean(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLockPassword(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLockPattern(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_KEYGUARD_SECURE_STORAGE
<com.android.server.MountService: int changeEncryptionPassword(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int decryptStorage(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int destroySecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_DESTROY
<com.android.server.MountService: int encryptStorage(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: int finalizeSecureContainer(java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.ASEC_CREATE
<com.android.server.MountService: int formatVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_FORMAT_FILESYSTEMS
<com.android.server.MountService: int getEncryptionState()> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String[] getSecureContainerList()> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: I[] getStorageUsers(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()> -> _SOURCE_
android.permission.ACCESS_ALL_EXTERNAL_STORAGE
<com.android.server.MountService: boolean isSecureContainerMounted(java.lang.String)> -> _SOURCE_
android.permission.ASEC_ACCESS
<com.android.server.MountService: int mountSecureContainer(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: int mountVolume(java.lang.String)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int renameSecureContainer(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.ASEC_RENAME
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.MountService: int unmountSecureContainer(java.lang.String,boolean)> -> _SOURCE_
android.permission.ASEC_MOUNT_UNMOUNT
<com.android.server.MountService: void unmountVolume(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.MOUNT_UNMOUNT_FILESYSTEMS
<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)> -> _SOURCE_
android.permission.CRYPT_KEEPER
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearDnsInterfaceForPid(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearDnsInterfaceForUidRange(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearDnsInterfaceMaps()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearHostExemption(android.net.LinkAddress)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearMarkedForwarding(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearMarkedForwardingRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void clearUidRangeRoute(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void flushDefaultDnsCache()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void flushInterfaceDnsCache(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: int getMarkForProtect()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: int getMarkForUid(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isClatdStarted()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: boolean isTetheringStarted()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: java.lang.String[] listTtys()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsInterfaceForPid(java.lang.String,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsInterfaceForUidRange(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setHostExemption(android.net.LinkAddress)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setMarkedForwarding(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setMarkedForwardingRoute(java.lang.String,android.net.RouteInfo)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setMtu(java.lang.String,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void setUidRangeRoute(java.lang.String,int,int)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void shutdown()> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startClatd(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopAccessPoint(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopClatd()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void stopTethering()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.NotificationManagerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_NOTIFICATIONS
<com.android.server.NotificationManagerService: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int)> -> _SOURCE_
android.permission.ACCESS_NOTIFICATIONS
<com.android.server.NsdService: android.os.Messenger getMessenger()> -> _SOURCE_
android.permission.INTERNET
<com.android.server.NsdService: void setEnabled(boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.SerialService: java.lang.String[] getSerialPorts()> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)> -> _SOURCE_
android.permission.SERIAL_PORT
<com.android.server.StatusBarManagerService: void collapsePanels()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void expandNotificationsPanel()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.StatusBarManagerService: void expandSettingsPanel()> -> _SOURCE_
android.permission.EXPAND_STATUS_BAR
<com.android.server.StatusBarManagerService: void onClearAllNotifications()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationClick(java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void onPanelRevealed()> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,int[],java.util.List)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void removeIcon(java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.StatusBarManagerService: void setSystemUiVisibility(int,int)> -> _SOURCE_
android.permission.STATUS_BAR_SERVICE
<com.android.server.StatusBarManagerService: void topAppWindowChanged(boolean)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> -> _SOURCE_
android.permission.ACCESS_COARSE_LOCATION, android.permission.READ_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> -> _SOURCE_
android.permission.MODIFY_PHONE_STATE
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_LOCK
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> -> _SOURCE_
android.permission.VIBRATE
<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> -> _SOURCE_
android.permission.UPDATE_APP_OPS_STATS, android.permission.VIBRATE
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> -> _SOURCE_
android.permission.SET_WALLPAPER_HINTS
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> -> _SOURCE_
android.permission.SET_WALLPAPER
<com.android.server.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.SET_WALLPAPER_COMPONENT
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService.Service: boolean performGlobalAction(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> -> _SOURCE_
temporaryEnableAccessibilityStateUntilKeyguardRemoved
<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> -> _SOURCE_
android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> -> _SOURCE_
android.permission.GET_ACCOUNTS
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> -> _SOURCE_
android.permission.GET_ACCOUNTS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> -> _SOURCE_
android.permission.USE_CREDENTIALS
<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> -> _SOURCE_
android.permission.GET_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS, android.permission.USE_CREDENTIALS
<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.AUTHENTICATE_ACCOUNTS
<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> -> _SOURCE_
android.permission.MANAGE_ACCOUNTS
<com.android.server.am.ActivityManagerService: void activityDestroyed(android.os.IBinder)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void appNotRespondingViaProvider(android.os.IBinder)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> -> _SOURCE_
android.permission.BACKUP
<com.android.server.am.ActivityManagerService: void clearPendingBackup()> -> _SOURCE_
android.permission.BACKUP
<com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: int createStack(int,int,int,float)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void dismissKeyguardOnNextActivity()> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)> -> _SOURCE_
android.permission.FORCE_STOP_PACKAGES
<com.android.server.am.ActivityManagerService: android.os.Bundle getAssistContextExtras(int)> -> _SOURCE_
android.permission.GET_TOP_ACTIVITY_INFO
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> -> _SOURCE_
android.permission.GET_TASKS
<com.android.server.am.ActivityManagerService: I[] getRunningUserIds()> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$StackBoxInfo getStackBoxInfo(int)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: java.util.List getStackBoxes()> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> -> _SOURCE_
android.permission.GET_TASKS
<com.android.server.am.ActivityManagerService: void goingToSleep()> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)> -> _SOURCE_
android.permission.FILTER_EVENTS
<com.android.server.am.ActivityManagerService: boolean isUserRunning(int,boolean)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> -> _SOURCE_
android.permission.KILL_BACKGROUND_PROCESSES
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> -> _SOURCE_
android.permission.KILL_BACKGROUND_PROCESSES
<com.android.server.am.ActivityManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.BROADCAST_STICKY, android.permission.MANAGE_ACTIVITY_STACKS, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> -> _SOURCE_
android.permission.REORDER_TASKS
<com.android.server.am.ActivityManagerService: void moveTaskToStack(int,int,boolean)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS, android.permission.START_ANY_ACTIVITY
<com.android.server.am.ActivityManagerService: void performIdleMaintenance()> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> -> _SOURCE_
android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY
<com.android.server.am.ActivityManagerService: boolean removeSubTask(int,int)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: boolean removeTask(int,int)> -> _SOURCE_
android.permission.REMOVE_TASKS
<com.android.server.am.ActivityManagerService: void requestBugReport()> -> _SOURCE_
android.permission.DUMP
<com.android.server.am.ActivityManagerService: void resizeStackBox(int,float)> -> _SOURCE_
android.permission.MANAGE_ACTIVITY_STACKS
<com.android.server.am.ActivityManagerService: void restart()> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void resumeAppSwitches()> -> _SOURCE_
android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController)> -> _SOURCE_
android.permission.SET_ACTIVITY_WATCHER
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> -> _SOURCE_
android.permission.SET_ALWAYS_FINISH
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> -> _SOURCE_
android.permission.SET_SCREEN_COMPATIBILITY
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> -> _SOURCE_
android.permission.SET_PROCESS_LIMIT
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> -> _SOURCE_
android.permission.SET_PROCESS_LIMIT
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> -> _SOURCE_
android.permission.SHUTDOWN
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> -> _SOURCE_
android.permission.SIGNAL_PERSISTENT_PROCESSES
<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> -> _SOURCE_
android.permission.SET_DEBUG_APP
<com.android.server.am.ActivityManagerService: void stopAppSwitches()> -> _SOURCE_
android.permission.STOP_APP_SWITCHES
<com.android.server.am.ActivityManagerService: int stopUser(int,android.app.IStopUserCallback)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: boolean switchUser(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> -> _SOURCE_
android.permission.BROADCAST_STICKY
<com.android.server.am.ActivityManagerService: void unhandledBack()> -> _SOURCE_
android.permission.FORCE_BACK
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.CHANGE_CONFIGURATION
<com.android.server.am.ActivityManagerService: void wakingUp()> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: B[] getStatistics()> -> _SOURCE_
android.permission.BATTERY_STATS
<com.android.server.am.BatteryStatsService: void noteBluetoothOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteInputEvent()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteNetworkStatsEnabled()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void notePhoneState(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteScreenOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopGps(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteVibratorOff(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabledFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOff()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiOn()> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.ProcessStatsService: B[] getCurrentStats(java.util.List)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)> -> _SOURCE_
android.permission.PACKAGE_USAGE_STATS
<com.android.server.am.UsageStatsService: void noteLaunchTime(android.content.ComponentName,int)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.UsageStatsService: void notePauseComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.am.UsageStatsService: void noteResumeComponent(android.content.ComponentName)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> -> _SOURCE_
android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_SETTINGS
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _SOURCE_
android.permission.READ_SYNC_STATS
<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
android.permission.WRITE_SYNC_SETTINGS
<com.android.server.display.DisplayManagerService: void connectWifiDisplay(java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: int createVirtualDisplay(android.os.IBinder,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)> -> _SOURCE_
android.permission.CAPTURE_SECURE_VIDEO_OUTPUT, android.permission.CAPTURE_VIDEO_OUTPUT
<com.android.server.display.DisplayManagerService: void forgetWifiDisplay(java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: void pauseWifiDisplay()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: void renameWifiDisplay(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: void resumeWifiDisplay()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: void startWifiDisplayScan()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.display.DisplayManagerService: void stopWifiDisplayScan()> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.dreams.DreamManagerService: void awaken()> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService: void dream()> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService: boolean isDreaming()> -> _SOURCE_
android.permission.READ_DREAM_STATE
<com.android.server.dreams.DreamManagerService: void setDreamComponents(android.content.ComponentName[])> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.dreams.DreamManagerService: void testDream(android.content.ComponentName)> -> _SOURCE_
android.permission.WRITE_DREAM_STATE
<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.SET_KEYBOARD_LAYOUT
<com.android.server.input.InputManagerService: void tryPointerSpeed(int)> -> _SOURCE_
android.permission.SET_POINTER_SPEED
<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)> -> _SOURCE_
android.permission.CONFIGURE_WIFI_DISPLAY
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY, android.permission.READ_PHONE_STATE
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: I[] getUidsWithPolicy(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> -> _SOURCE_
android.permission.MANAGE_NETWORK_POLICY
<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: void forceUpdate()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> -> _SOURCE_
android.permission.ACCESS_NETWORK_STATE
<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSession()> -> _SOURCE_
android.permission.READ_NETWORK_USAGE_HISTORY
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SOURCE_
android.permission.MODIFY_NETWORK_ACCOUNTING
<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> -> _SOURCE_
android.permission.CLEAR_APP_USER_DATA, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.DELETE_CACHE_FILES
<com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)> -> _SOURCE_
android.permission.DELETE_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)> -> _SOURCE_
android.permission.PACKAGE_VERIFICATION_AGENT
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> -> _SOURCE_
android.permission.CLEAR_APP_CACHE
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean getApplicationBlockedSettingAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivities(java.util.List)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> -> _SOURCE_
android.permission.GET_PACKAGE_SIZE
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()> -> _SOURCE_
android.permission.PACKAGE_VERIFICATION_AGENT
<com.android.server.pm.PackageManagerService: void grantPermission(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int)> -> _SOURCE_
android.permission.INSTALL_PACKAGES, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageManagerService: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageManagerService: void installPackageWithVerificationAndEncryption(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.VerificationParams,android.content.pm.ContainerEncryptionParams)> -> _SOURCE_
android.permission.INSTALL_PACKAGES
<com.android.server.pm.PackageManagerService: boolean isPackageAvailable(java.lang.String,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)> -> _SOURCE_
android.permission.MOVE_PACKAGE
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: java.util.List queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void resetPreferredActivities(int)> -> _SOURCE_
android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void revokePermission(java.lang.String,java.lang.String)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: boolean setApplicationBlockedSettingAsUser(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.MANAGE_USERS
<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.pm.PackageManagerService: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS_FULL, android.permission.SET_PREFERRED_APPLICATIONS
<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)> -> _SOURCE_
android.permission.CHANGE_COMPONENT_ENABLED_STATE, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)> -> _SOURCE_
android.permission.GRANT_REVOKE_PERMISSIONS
<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)> -> _SOURCE_
android.permission.PACKAGE_VERIFICATION_AGENT
<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService: void crash(java.lang.String)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService: void goToSleep(long,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void nap(long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void reboot(boolean,java.lang.String,boolean)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService: void setAttentionLight(boolean,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void setStayOnSetting(int)> -> _SOURCE_
android.permission.WRITE_SETTINGS
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverride(int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void shutdown(boolean,boolean)> -> _SOURCE_
android.permission.REBOOT
<com.android.server.power.PowerManagerService: void updateWakeLockUids(android.os.IBinder,int[])> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS, android.permission.WAKE_LOCK
<com.android.server.power.PowerManagerService: void userActivity(long,int,int)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.power.PowerManagerService: void wakeUp(long)> -> _SOURCE_
android.permission.DEVICE_POWER
<com.android.server.print.PrintManagerService: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: void cancelPrintJob(android.print.PrintJobId,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: java.util.List getEnabledPrintServices(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: java.util.List getInstalledPrintServices(int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: java.util.List getPrintJobInfos(int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void restartPrintJob(android.print.PrintJobId,int,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL, com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS
<com.android.server.print.PrintManagerService: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void startPrinterStateTracking(android.print.PrinterId,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void stopPrinterStateTracking(android.print.PrinterId,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.print.PrintManagerService: void validatePrinters(java.util.List,int)> -> _SOURCE_
android.permission.INTERACT_ACROSS_USERS, android.permission.INTERACT_ACROSS_USERS_FULL
<com.android.server.sip.SipService: void close(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> -> _SOURCE_
android.permission.USE_SIP
<com.android.server.usb.UsbService: void allowUsbDebugging(boolean,java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void clearUsbDebuggingKeys()> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void denyUsbDebugging()> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.usb.UsbService: void setMassStorageBackingFile(java.lang.String)> -> _SOURCE_
android.permission.MANAGE_USB
<com.android.server.wifi.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.wifi.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void addToBlacklist(java.lang.String)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void captivePortalCheckComplete()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiService: void clearBlacklist()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: boolean disableNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void disconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: boolean enableNetwork(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: java.util.List getBatchedScanResults(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: java.lang.String getConfigFile()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: java.util.List getConfiguredNetworks()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: android.net.DhcpInfo getDhcpInfo()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: int getFrequencyBand()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: java.util.List getScanResults(java.lang.String)> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: int getWifiApEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: int getWifiEnabledState()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE, android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void initializeMulticastFiltering()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiService: boolean isMulticastEnabled()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: boolean isScanAlwaysAvailable()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: boolean pingSupplicant()> -> _SOURCE_
android.permission.ACCESS_WIFI_STATE
<com.android.server.wifi.WifiService: void pollBatchedScan()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void reassociate()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void reconnect()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void releaseMulticastLock()> -> _SOURCE_
android.permission.CHANGE_WIFI_MULTICAST_STATE
<com.android.server.wifi.WifiService: boolean releaseWifiLock(android.os.IBinder)> -> _SOURCE_
android.permission.WAKE_LOCK
<com.android.server.wifi.WifiService: boolean removeNetwork(int)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE, android.permission.UPDATE_DEVICE_STATS
<com.android.server.wifi.WifiService: boolean saveConfiguration()> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void setCountryCode(java.lang.String,boolean)> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiService: void setFrequencyBand(int,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: boolean setWifiEnabled(boolean)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void startScan(android.os.WorkSource)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE, android.permission.UPDATE_DEVICE_STATS
<com.android.server.wifi.WifiService: void startWifi()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiService: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> -> _SOURCE_
android.permission.CHANGE_WIFI_STATE
<com.android.server.wifi.WifiService: void stopWifi()> -> _SOURCE_
android.permission.CONNECTIVITY_INTERNAL
<com.android.server.wifi.WifiService: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SOURCE_
android.permission.UPDATE_DEVICE_STATS
<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,int,boolean,boolean,int,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensity(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void executeAppTransition()> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void freezeRotation(int)> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)> -> _SOURCE_
android.permission.MAGNIFY_DISPLAY
<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()> -> _SOURCE_
android.permission.RETRIEVE_WINDOW_INFO
<com.android.server.wm.WindowManagerService: void getWindowFrame(android.os.IBinder,android.graphics.Rect)> -> _SOURCE_
android.permission.RETRIEVE_WINDOW_INFO
<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void pauseKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> -> _SOURCE_
android.permission.DISABLE_KEYGUARD
<com.android.server.wm.WindowManagerService: void removeAppToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void resumeKeyDispatching(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,boolean)> -> _SOURCE_
android.permission.READ_FRAME_BUFFER
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> -> _SOURCE_
android.permission.SET_ANIMATION_SCALE
<com.android.server.wm.WindowManagerService: void setAppGroupId(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setAppWillBeHidden(android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void setInputFilter(android.view.IInputFilter)> -> _SOURCE_
android.permission.FILTER_EVENTS
<com.android.server.wm.WindowManagerService: void setMagnificationCallbacks(android.view.IMagnificationCallbacks)> -> _SOURCE_
android.permission.MAGNIFY_DISPLAY
<com.android.server.wm.WindowManagerService: void setMagnificationSpec(android.view.MagnificationSpec)> -> _SOURCE_
android.permission.MAGNIFY_DISPLAY
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)> -> _SOURCE_
android.permission.WRITE_SECURE_SETTINGS
<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> -> _SOURCE_
android.permission.FREEZE_SCREEN
<com.android.server.wm.WindowManagerService: boolean startViewServer(int)> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)> -> _SOURCE_
android.permission.STATUS_BAR
<com.android.server.wm.WindowManagerService: void stopAppFreezingScreen(android.os.IBinder,boolean)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
<com.android.server.wm.WindowManagerService: void stopFreezingScreen()> -> _SOURCE_
android.permission.FREEZE_SCREEN
<com.android.server.wm.WindowManagerService: boolean stopViewServer()> -> _SOURCE_
android.permission.DUMP
<com.android.server.wm.WindowManagerService: void thawRotation()> -> _SOURCE_
android.permission.SET_ORIENTATION
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)> -> _SOURCE_
android.permission.MANAGE_APP_TOKENS
